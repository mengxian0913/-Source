#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "NUC100Series.h"
#include "MCU_init.h"
#include "SYS_init.h"
#include "Scankey.h"
#include "Seven_Segment.h"
#define DELAY (int)(1e5 - 6000)
#define Loop (int)(1000)

int digit[5] = {0}; // from left to right
int rgb[3] = {0, 1, 1};
int digit_len = 1;
int rotate = -1;
int i, j, rgb_idx = 0;
int loop = 0;
bool rgb_play = false;

void Init_GPIO(void)
{
	GPIO_SetMode(PA, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT14, GPIO_MODE_OUTPUT);
	PA12= PA13 = PA14 = 1;
	loop = 0;
}


// display an integer on four 7-segment LEDs
void Display_7seg()
{
	// 3 2 1 0
	for(i = 0, j = 2; i < 3; i++, j--) {
		CloseSevenSegment();
		if( digit[i] != 0 ) {
			ShowSevenSegment(j, digit[i]);
		}
		CLK_SysTickDelay(2000);
	}
  return;
}

void Display_RGB() {
	for(i = 0; i < 3; i++) rgb[i] = 1;
	rgb[rgb_idx] = 0;
	rgb_idx = ( rgb_idx + 1 ) % 3;
	PA12 = rgb[0];
	PA13 = rgb[1];
	PA14 = rgb[2];
	return;
}

void rotate_left() {
	
	int tmp[3];
	tmp[0] = digit[1];
	tmp[1] = digit[2];
	tmp[2] = digit[0];
	for(i = 0; i < 3; i++) digit[i] = tmp[i];
	// RGB switch
	return;
}

void rotate_right() {
	int tmp[3];
	tmp[0] = digit[2];
	tmp[1] = digit[0];
	tmp[2] = digit[1];
	for(i = 0; i < 3; i++) digit[i] = tmp[i];
	// RGB switch
	return;
}


void solve(int num) {
	if ( num == 7 ) {
		rotate = 1;
		rgb_play = true;
		return;
	} else if( num == 8 ) {
		rotate = -1;
		rgb_play = false;
		PA12 = PA13 = PA14 = 1;
		memset(digit, 0, sizeof(digit));
		digit_len = 1;
		return;
	} else if ( num == 9 ) {
		rotate = 2;
		rgb_play = true;
		return;
	}
	
	for(i = 0; i < digit_len; i++) {
		digit[i] = digit[i + 1];
	}
	digit[2] = num;
	digit_len++;
	return;
}

void effect() {
	if( (Loop * loop) % DELAY == 0 ) {
		if ( rotate == 1 ) {
			rotate_left();
		} else if( rotate == 2 ) {
			rotate_right();
		} if( rgb_play ) {
			Display_RGB(); // RGB effect.
		}
	}
	
	Display_7seg();

	return;
}


int main(void)
{
	int keyin = 0;
	bool keyPressed = false;
	SYS_Init();
	Init_GPIO();
	OpenKeyPad();    
	OpenSevenSegment();

 	while(1) 
	{
		// handle 7-segmeng and RGB effect..
		effect();
		keyin = ScanKey();
		CLK_SysTickDelay(Loop);
		loop++;
		
            
		if( keyin == 0 ) {
			keyPressed = false;
			continue;
		}
		
		if(keyPressed) {
			continue;
		}
		
		keyPressed = true;
		solve(keyin);
	}
	
	return 0;
}
